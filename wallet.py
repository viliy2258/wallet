import logging
import time
from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from pycoingecko import CoinGeckoAPI
from requests.exceptions import Timeout

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è CoinGecko API —Ç–∞ –±–æ—Ç–∞
cg = CoinGeckoAPI()
TOKEN = '7537724449:AAG0u3MC4GjsLHtYHAJS4qVbtQY-FzspDoE'

# –ö–µ—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
cached_prices = {}
last_cache_time = 0
cache_duration = 60  # 60 —Å–µ–∫—É–Ω–¥

# –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç –∑ –≤–∞—à–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
wallet_balances = {
    'notcoin': 23517.73839,  # NOT
    'dogs-2': 143153.0,      # DOGS
    'the-open-network': 20.77484381,  # TON
    'catizen': 52.2543,  # CATI
    'tether': 53.7169  # USDT
}

# –ú–∞–ø–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
crypto_map = {
    "üßë‚Äçüíª bitcoin": "bitcoin",
    "üì¢ ton coin": "the-open-network",
    "üêï dogs": "dogs-2",
    "üéÆ notcoin": "notcoin",
    "üê∏ pepe": "pepe",
    "üêà cati": "catizen"  # Updated from Solana to CATI
}

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω
def format_price(price):
    if price > 100:
        return f"${price:.2f}"
    elif price > 1:
        return f"${price:.2f}"
    else:
        return f"${price:.7f}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
async def fetch_prices():
    global cached_prices, last_cache_time
    current_time = time.time()
    if current_time - last_cache_time > cache_duration:
        try:
            cached_prices = cg.get_price(ids=['bitcoin', 'notcoin', 'dogs-2', 'the-open-network', 'pepe', 'catizen', 'tether'], vs_currencies='usd', include_24hr_change='true')
            last_cache_time = current_time
        except Timeout:
            logging.warning("–ó–∞–ø–∏—Ç –¥–æ CoinGecko API –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —Ç–∞–π–º-–∞—É—Ç–æ–º.")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ CoinGecko: {e}")
    return cached_prices

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
async def start(update: Update, context):
    start_time = time.time()
    keyboard = [
        ["üßë‚Äçüíª Bitcoin", "üì¢ Ton Coin"],
        ["üêï DOGS", "üéÆ Notcoin"],
        ["üê∏ Pepe", "üêà CATI"],  # Updated the keyboard from Solana to CATI
        ["üí∞ –ë–∞–ª–∞–Ω—Å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å:', reply_markup=reply_markup)
    end_time = time.time()
    logging.info(f"–ß–∞—Å –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ /start: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –∞–±–æ –±–∞–ª–∞–Ω—Å—É
async def handle_message(update: Update, context):
    start_time = time.time()
    text = update.message.text.lower()

    if text == "üí∞ –±–∞–ª–∞–Ω—Å":
        await balance(update, context)
    else:
        crypto = crypto_map.get(text)
        if crypto:
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ —Ä–æ–±–∏–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
                api_start_time = time.time()
                prices = await fetch_prices()  # –û—Ç—Ä–∏–º—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
                api_end_time = time.time()
                logging.info(f"–ß–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ CoinGecko API –¥–ª—è {crypto}: {api_end_time - api_start_time:.2f} —Å–µ–∫—É–Ω–¥")

                if prices and crypto in prices:
                    process_start_time = time.time()
                    price_per_unit = prices[crypto]['usd']
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–º—ñ–Ω–∞ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
                    percent_change_24h = prices[crypto].get('usd_24h_change')
                    if percent_change_24h is None:
                        percent_change_24h = "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
                    else:
                        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑–º—ñ–Ω—É –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ –¥–æ –¥–≤–æ—Ö –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
                        percent_change_24h = f"{percent_change_24h:.2f}"

                    user_balance = wallet_balances.get(crypto, 0)
                    total_value = price_per_unit * user_balance

                    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    message = (
                        f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {text.capitalize()}\n"
                        f"–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é: {format_price(price_per_unit)} USD\n"
                        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {user_balance} –º–æ–Ω–µ—Ç\n"
                        f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {format_price(total_value)} USD\n"
                        f"–ó–º—ñ–Ω–∞ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏: {percent_change_24h}%"
                    )
                    process_end_time = time.time()
                    logging.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –¥–ª—è {crypto}: {process_end_time - process_start_time:.2f} —Å–µ–∫—É–Ω–¥")

                    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API
                    telegram_start_time = time.time()
                    await update.message.reply_text(message)
                    telegram_end_time = time.time()
                    logging.info(f"–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API –¥–ª—è {crypto}: {telegram_end_time - telegram_start_time:.2f} —Å–µ–∫—É–Ω–¥")
                else:
                    await update.message.reply_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
                await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

    end_time = time.time()
    logging.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /balance –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—Å—ñ –º–æ–Ω–µ—Ç–∏
async def balance(update: Update, context):
    start_time = time.time()
    try:
        api_start_time = time.time()
        prices = await fetch_prices()  # –û—Ç—Ä–∏–º—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
        api_end_time = time.time()
        logging.info(f"–ß–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ CoinGecko API –¥–ª—è –±–∞–ª–∞–Ω—Å—É: {api_end_time - api_start_time:.2f} —Å–µ–∫—É–Ω–¥")

        total_value = 0
        balance_details = []

        coin_names = {
            'notcoin': 'Notcoin',
            'dogs-2': 'Dogs',
            'the-open-network': 'Ton coin',
            'catizen': 'Cati',
            'tether': 'USDT'  # Adding USDT to display it in the balance
        }

        for coin, balance in wallet_balances.items():
            if coin in prices:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü—ñ–Ω–∞ –¥–ª—è –º–æ–Ω–µ—Ç–∏
                coin_price = prices[coin]['usd']
                coin_value = balance * coin_price
                total_value += coin_value
                balance_details.append(f"{coin_names.get(coin, coin.capitalize())}: {balance:.6f} = {format_price(coin_value)} USD")
            else:
                balance_details.append(f"{coin_names.get(coin, coin.capitalize())}: –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        details_message = "\n".join(balance_details)
        total_message = f"–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n{details_message}\n\n–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç: {total_value:.2f} USD"

        process_start_time = time.time()
        await update.message.reply_text(total_message)
        process_end_time = time.time()
        logging.info(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API –¥–ª—è –±–∞–ª–∞–Ω—Å—É: {process_end_time - process_start_time:.2f} —Å–µ–∫—É–Ω–¥")

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

    end_time = time.time()
    logging.info(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –±–∞–ª–∞–Ω—Å—É: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
if __name__ == '__main__':
    bot = Bot(token=TOKEN)  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–æ—Ç–∞
    application = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling()


#cd "C:\Users\reset\OneDrive\–†–æ–±–æ—á–∏–π —Å—Ç—ñ–ª\python_files"
#python p.py
